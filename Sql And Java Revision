// Java Collections and MYSql Revison and Notes

// import ;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Collectors;
// java collection framework

public class JavaRevision {
	
	// public static int solve(String s) {
	// 	int ans = 0;
	// 	int cnt[] = new int[256];
	// 	for(int i = 0; i < s.length(); i ++) cnt[s.charAt(i)] ++;
	// 	Map<Character, Integer> m = new HashMap<Character, Integer>();
		
	// 	int j = 0;
	// 	for(int i = 0; i < s.length(); i ++) {
	// 		m.put(s.charAt(i), m.getOrDefault(s.charAt(i), 0) + 1);
	// 		while(m.get(s.charAt(i)) > 1) {
	// 			m.put(s.charAt(j),m.get(s.charAt(j) - 1));
	// 			if(m.get(s.charAt(j)) == 0) {
	// 				m.remove(s.charAt(j));
	// 			}
	// 			j = j + 1;
	// 		}
			
	// 		ans = Math.max(ans,  m.size());
	// 	}
	// 	return ans;
	// }


	public static void main(String args[]) throws Exception {
		// given a string find the longest unique substring
		// String s;
		// try {
		// 	 Scanner sc = new Scanner(System.in);
		// 	 s = sc.next();
		// }catch(Exception e) {
		// 	throw new Exception(e.getMessage());
		// }
		// int ans = solve(s);
		// System.out.println("result " + ans);



		// ArrayList
		// HashSet // do not maintain the order
		// TreeSet // maintain the accending order 
		// HashMap // do not maintain the order
		// LinkedHashMap  // maintain the insertion order 
		// TreeMap    // maintain the sorted key order 
		// PriorityQueue
		// Deque
		// Vector // thread safe // when two threads are modifying the containts of the same list then should user vector insted ArrayList
						// it's thread safe



		// stream api of java

		// ArrayList<Integer> arr = new ArrayList<Integer>();
		// for(int i = 0; i < 10; i ++) arr.add(i + 1);

		// List<Integer> new_list = arr.stream().map(x -> x * x).collect(Collectors.toList());
		// List<Integer> sorted_list = arr.stream().sorted().map(x -> x / 2).collect(Collectors.toList());
		 // List<Integer> filtered_list = arr.stream()
			// 								.filter(x -> x % 2 == 0)
			// 							    .filter(x -> x > 20)
			// 								.collect(Collectors()
			// 								.toList()); // return all the elements x > 20 and even

		// System.out.println(new_list);
		// System.out.println(sorted_list);
		// System.out.println(filtered_list);

		


	

	}
}

// date : 4 Nov 2022
// MySql Revision From Udemy Course



// creating database
// CREATE DATABASE <database_name>;
// create database dog_shop;
// create database chicken_coop;

// show databases;


// drop database dog_shop; // delete database
// use database chicken_coop;


// Create database and tables part 3

// create database and tables
// CREATE DATABASE pet_shop;
// use DATABASE pet_shop;

// CTEATE TABLE cats(
// 	name VARCHAR(50), 
// 	age INT
// );

// CREATE TABLE dogs(
// 	name VARCHAR(50),
// 	breed VARCHAR(50), 
// 	age INT

// );

// show tables; // pet_shop
// desc cats;
// desc dogs;
// show columns from cats; // same as desc;

// deleting tables // DROP TABLE <table_name>;

// CREATE TABLE pastries(
// 	name VARCHAR(50), 
// 	quantity INT

// );

// show tables;
// DROP table pastries;
// mysql comment // -- 
// -- SELECT * from cats;  // use two dashes in front of table


// inserting the data part 4


// INSERT INTO cats(name, age) VALUES("Jenkins", 5);
// INSERT INTO cats(name, age) VALUES("mike", 4);
// INSERT INTO cats(name, age) VALUES("pikke", 3);


// inserting multiple values at once 
// INSERT INTO cats(name, age)
// VALUES  ('jale', 2), 
// 		('billo', 3), 
// 		('jakki', 4),
// 		('summo', 5);

// CREATE TABLE people(
// 	first_name VARCHAR(20),
// 	last_name VARCHAR(20), 
// 	age INT
// );

// DESC people;

// INSERT INTO people(first_name, last_name, age)
// 			VALUES('vicky', 'kumar', 21),
// 				  ('rajive', 'kumar', 22),
// 				  ('jayesh', 'batta', 33);

// SELECT * FROM people;

// CRATE TABLE cats2(
// 	name VARCHAR(50) NOT NULL,
// 	age INT NOT NULL
// );


// createing table with default values

// in this table null values are allowed
// CREATE TABLE cats3(
// 	name VARCHAR(50) DEFAULT 'mystery',
// 	age INT DEFAULT 5
// );


// in this table null values are not allowed
// CREATE TABLE cats4(
// 	name VARCHAR(50) NOT NULL DEFAULT 'mystery',
// 	age INT NOT NULL DEFAULT 99
// );


// creating table with primary key 

// CREATE TABLE unique_cats(
// 	cat_id INT PRIMARY_KEY, 
// 	name VARCHAR(50) NOT NULL, 
// 	age INT NOT NULL
// );

//  // another option 
//  CREATE TABLE unique_cats2(
//  	cat_id INT,
//  	name VARCHAR(50) NOT NULL,
//  	age INT NOT NULL,
//  	PRIMARY KEY(cat_id)
//  );


// CREATE TABLE unique_cats3(
// 	cat_id INT AUTO_INCREMENT PRIMARY KEY,
// 	name VARCHAR(50) NOT NULL,
// 	age INT NOT NULL
// );


// CREATE TABLE unique_cats3(
// 	cat_id INT AUTO_INCREMENT, 
// 	name VARCHAR(50) NOT NULL,
// 	age INT NOT NULL

// 	PRIMARY_KEY(cat_id)
// );

// CREATE TABLE employees(
// 	id INT AUTO_INCREMENT PRIMARY KEY,
// 	last_name VARCHAR(100) NOT NULL,
// 	first_name VARCHAR(100) NOT NULL, 
// 	middle_name VARCHAR(100), 
// 	age INT NOT NULL,
// 	current_status VARCHAR(100) NOT NULL DEFAULT 'employed'
// );

// DESC employees;
 // INSERT INTO employess (first_name, last_name, age) 
 // 					 VALUES('vicky', 'kumar', 21)
 // 					 		('rajiv', 'kumar', 22), 
 // 					 		('sarthk', 'modi', 33), 
 // 					 		('jayent', 'chhipa', 22);

 // SELECT * FROM employees;
//  DROP TABLE employees;




// CRUD operations part 5


// DROP TABLE cats;

// CREATE TABLE cats(
// 	cat_id INT AUTO_INCREMENT,
// 	name VARCHAR(100), 
// 	breed VARCHAR(100), 
// 	age INT,
// 	PRIMARY KEY(cat_id)
// );

// INSERT INTO cats(name, breed, age)
// VALUES('ringo', 'tabby', 4), 
// 	   ('Cindy', 'Maine Coon', 10),
//        ('Dumbledore', 'Maine Coon', 11),
//        ('Egg', 'Persian', 4),
//        ('Misty', 'Tabby', 13),
//        ('George Michael', 'Ragdoll', 9),
//        ('Jackson', 'Sphynx', 7);

// SELECT * FROM cats;
// SELECT name, breed, age FROM cats;
// SELECT * FROM cats WHERE age >= 4;
// SELECT name, age FROM cats WHERE age = 4;
// SELECT name FROM cats WHERE age = 4
// SELECT name FROM cats WHERE name = 'egg';
// SELECT name FROM cats WHERE name = 'eGG'; // same as above 

// SELECT cat_id FROM cats;
// SELECT name, breed FROM cats;
// SELECT name, age FROM cats WHERE breed='Tabby';
// SELECT cat_id, age FROM cats WHERE cat_id=age;
// SELECT * FROM cats WHERE cat_id=age;


// SELECT cat_id as id, name FROM cats;
// UPDATE employees SET last_name = 'tiwari' WHERE first_name = 'vicky';
// UPDATE employees SET last_name = 'pandit' WHERE first_name = 'rajiv';
// SELECT * FROM cats WHERE name='Jackson'; 
// UPDATE cats SET name='Jack' WHERE name='Jackson'; 
// SELECT * FROM cats WHERE name='Jackson'; 
// SELECT * FROM cats WHERE name='Jack'; 
// SELECT * FROM cats WHERE name='Ringo'; 
// UPDATE cats SET breed='British Shorthair' WHERE name='Ringo'; 
// SELECT * FROM cats WHERE name='Ringo'; 
// SELECT * FROM cats; 
// SELECT * FROM cats WHERE breed='Maine Coon'; 
// UPDATE cats SET age=12 WHERE breed='Maine Coon'; 
// SELECT * FROM cats WHERE breed='Maine Coon';


// DELETE FROM cats WHERE name = 'egg';
// DELETE FROM cats; // will delete all the data in the table

// DELETE FROM cats WHERE cat_id = age;
// DELETE FROM cats; // all cats will be delete simmilar to truncate


// practice part 6

// CREATE DATABASE shirts_db;
// USE shirts_db;

// CREATE TABLE shirts(
// 	shirt_id INT AUTO_INCREMENT PRIMARY KEY,
// 	article VARCHAR(50),
// 	color VARCHAR(50), 
// 	shirt_size VARCHAR(5), 
// 	last_worn INT

// );

// DESC shirts;

// INSERT INTO shirts (article, color, shirt_size, last_worn)
// VALUES
//     ('t-shirt', 'white', 'S', 10),
// 	('t-shirt', 'green', 'S', 200),
// 	('polo shirt', 'black', 'M', 10),
// 	('tank top', 'blue', 'S', 50),
// 	('t-shirt', 'pink', 'S', 0),
// 	('polo shirt', 'red', 'M', 5),
// 	('tank top', 'white', 'S', 200),
// 	('tank top', 'blue', 'M', 15);

// INSERT INTO shirts (article, color, shirt_size, last_worn)
// VALUES ('polo shirt', 'purple', 'M', 50);

// SELECT article, color FROM shirts;
// SELECT * FROM shirts WHERE shirt_size = 'M';
// SELECT article, color, shirt_size, last_worn FROM shirts WHERE shirt_size = 'R';

// UPDATE shirts SET shirt_size = 'L' WHERE article = 'polo shirt';
// UPDATE shirts SET last_worn = 0 WHERE las_worn = 15;
// UPDATE shirts SET color = 'off white', shirt_size = 'XS' WHERE color = 'white';
// SELECT * FROM shirts WHERE last_worn = 200;
// DELETE FROM shirts WHERE last_worn = 200;
// SELECT * FROM shirts WHERE article = 'tank top';
// DELETE FROM shirts WHERE article = 'tank top';
// SELECT * FROM shirts;
// DELETE FROM shirts;
// DROP TABLE shirts;


// string functions part 7

   // we can store in a file with .sql
   // and can execute from cmd using source file_name;

// CREATE TABLE books 
// 	(
// 		book_id INT AUTO_INCREMENT,
// 		title VARCHAR(100),
// 		author_fname VARCHAR(100),
// 		author_lname VARCHAR(100),
// 		released_year INT,
// 		stock_quantity INT,
// 		pages INT,
// 		PRIMARY KEY(book_id)
// 	);
 
// INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
// VALUES
// ('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
// ('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
// ('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
// ('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
// ('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
// ('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
// ('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
// ('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
// ('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
// ('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
// ('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
// ("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
// ('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
// ('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
// ('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
// ('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);


// SELECT CONCAT('pi', 'ckle');
// SELECT CONCAT(author_fname, ' ', author_lname) as author_name FROM books;
// SELECT CONCAT_WS('-', title, author_fname, author_lname) FROM books;
// SELECT SUBSTRING('Hello World', 1, 7); // Hello 
// SELECT LEFT('Hello World', 3);  // Hel
// SELECT RIGHT('Hello world', 3); // rld

// SUBSTR and SUBSRING both are same in mysql

// SELECT CONCAT(SUBSTR(title, 1, 10), '...') AS short_title FROM books;
// SELECT CONCAT(
//        SUBSTR(author_fname, 1, 1), '.', SUBSTR(author_lname,1, 1)
 //   ) FROM Books;


